{"version":3,"sources":["index.js","sudoku.js"],"names":["defaultState","grid","store","createStore","state","action","type","newgrid","Object","assign","y","x","value","Cell","props","posx","posy","isGiven","clicked","bind","val","this","numChange","className","onClick","React","Component","Celll","connect","dispatch","psx","psy","numChangeAction","Grid","getState","map","row","item","Sudoku","fetchSudoku","valid","arraySolution","x2","y2","startY","Math","floor","startX","isValidSudoku","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b6d1b8a.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport { connect } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {isValidSudoku} from './sudoku';\n\n//Redux Code\nconst defaultState = {\n    grid: [[]]\n};\n\nconst reducer = (state = defaultState, action) => {\n    if (action.type === \"NUM-CHANGE\") {\n        let newgrid = Object.assign([...state.grid], {\n            [action.y]: Object.assign([...state.grid[action.y]], {\n              [action.x]: action.value\n            })\n          })\n        return {\n            grid: newgrid\n        };\n    } else if (action.type === 'SET-BOARD'){\n        return{\n            grid: action.grid\n        };\n    } else {\n        return state;\n    }\n};\n\nconst store = createStore(reducer);\n\nconst setBoardAction = (board) => {\n    return {\n        type: 'SET-BOARD',\n        grid: board\n    }\n};\n\nconst numChangeAction = (psx,psy,val) => {\n    return {\n      type: 'NUM-CHANGE',\n      x: psx,\n      y: psy,\n      value: val,\n    }\n};\n\nconst mapStateToProps = (state) => {\n    return { grid: state.grid };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        numChange: (x,y,val) => dispatch(\n            numChangeAction(x,y,val)\n        )\n    }\n}\n\n//React Code\nclass Cell extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            x: this.props.posx,\n            y: this.props.posy,\n            isGiven: this.props.isGiven,\n        };\n        this.clicked = this.clicked.bind(this);\n    }\n\n    clicked() {\n        var val = this.props.grid[this.state.y][this.state.x]\n        if (val < 9 & val !== '') {\n            this.props.numChange(\n                this.state.x,\n                this.state.y,\n                val + 1,\n            )\n        } else if (val === 9) {\n            this.props.numChange(\n                this.state.x,\n                this.state.y,\n                '',\n            )\n        } else if (val === '') {\n            this.props.numChange(\n                this.state.x,\n                this.state.y,\n                1,\n            )\n        }\n    }\n\n    render() {\n        if (this.state.isGiven) {\n            return (\n                <td className=\"isGiven\">\n                    {this.props.grid[this.state.y][this.state.x]}\n                </td>\n            );\n        } else {\n            return (\n                <td>\n                    <button className='cell-button' onClick={this.clicked}>\n                        {this.props.grid[this.state.y][this.state.x]}\n                    </button>\n                </td>\n            );\n        }\n    }\n}\n\nconst Celll = connect(mapStateToProps, mapDispatchToProps)(Cell);\n\nclass Grid extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        var grid = store.getState().grid\n        grid = grid.map(\n            (row, y) => {\n                return row.map(\n                    (item, x) => {\n                        if(item === '') {\n                            //store.dispatch(numChangeAction(x,y,''))\n                            return <Celll posx={x} posy={y} isGiven={false}/>\n                        } else {\n                            return <Celll posx={x} posy={y} isGiven={true}/>\n                        }\n                    }\n                );\n            }\n        )\n\n        return (\n\t    <div>\n\t    <table className='inline' >\n        <colgroup><col/><col/><col/></colgroup>\n        <colgroup><col/><col/><col/></colgroup>\n        <colgroup><col/><col/><col/></colgroup>\n        <tbody>\n            <tr>{grid[0]}</tr>\n            <tr>{grid[1]}</tr>\n            <tr>{grid[2]}</tr>        \n        </tbody>\n        <tbody>\n            <tr>{grid[3]}</tr>\n            <tr>{grid[4]}</tr>\n            <tr>{grid[5]}</tr>        \n        </tbody>\n        <tbody>\n            <tr>{grid[6]}</tr>\n            <tr>{grid[7]}</tr>\n            <tr>{grid[8]}</tr>        \n        </tbody>\n        </table>\n\t    </div>\n\t    );\n    }\n}\n\nclass Sudoku extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.fetchSudoku = this.fetchSudoku.bind(this);\n    }\n\n    fetchSudoku() {\n        var puzzle = [\n            ['', 6,'', 3,'','', 8,'', 4],\n            [5 , 3, 7,'', 9,'','','',''],\n            ['',4,'','','',6,3,'',7],\n            ['',9,'','',5,1,2,3,8],\n            ['','','','','','','','',''],\n            [7,1,3,6,2,'','',4,''],\n            [3,'',6,4,'','','',1,''],\n            ['','','','',6,'',5,2,3],\n            [1,'',2,'','',9,'',8,'']];\n\n        store.dispatch(setBoardAction(puzzle))\n    }\n    \n    // returns true if arraySolution is valid, false otherwise\n    checkSolution() {\n        const valid = isValidSudoku(store.grid)\n        console.log(valid)\n    }\n\n    render() {\n        this.fetchSudoku()\n        return ( \n            <div >\n                <h1>React/Redux Sudoku App</h1>\n                <Grid />\n                <div className='inline'>\n                    <button onClick={this.fetchSudoku} className='bottomButtons'>New Sudoku</button>\n                    <button className='bottomButtons'>Check Solution</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Provider store={store}>\n        <Sudoku />\n    </Provider>,\n    document.getElementById('root')\n);","export const isValidSudoku = (arraySolution) => {\n    for (var y = 0; y < 9; ++y) {\n        for (var x = 0; x < 9; ++x) {\n            var value = arraySolution[y][x];\n            if (value) {\n                if(value === ''){\n                    return false;\n                }\n                // Check the line\n                for (var x2 = 0; x2 < 9; ++x2) {\n                    if (x2 != x && arraySolution[y][x2] == value) {\n                        return false;\n                    } \n                }\n                // Check the column\n                for (var y2 = 0; y2 < 9; ++y2) {\n                    if (y2 != y && arraySolution[y2][x] == value) {\n                        return false;\n                    } \n                }\n                // Check the square\n                var startY = Math.floor(y/3)*3;\n                for (var y2 = startY; y2 < startY + 3; ++y2) {\n                    var startX = Math.floor(x/3)*3;\n                    for (x2 = startX; x2 < startX + 3; ++x2) {\n                        if ((x2 != x || y2 != y) && arraySolution[y2][x2] == value) {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n\nexport const newRandomSudoku = () => {\n    return [[]];\n}"],"sourceRoot":""}