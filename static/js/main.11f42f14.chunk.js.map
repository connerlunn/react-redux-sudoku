{"version":3,"sources":["index.js","sudoku.js"],"names":["defaultState","grid","store","createStore","state","action","type","newgrid","Object","assign","y","x","value","Cell","props","posx","posy","isGiven","clicked","bind","val","this","numChange","className","onClick","React","Component","Celll","connect","dispatch","psx","psy","numChangeAction","Grid","getState","map","row","item","Sudoku","fetchSudoku","valid","arraySolution","x2","y2","startY","Math","floor","startX","isValidSudoku","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.11f42f14.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport { connect } from 'react-redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {isValidSudoku} from './sudoku';\r\n\r\n//Redux Code\r\nconst defaultState = {\r\n    grid: [[]]\r\n};\r\n\r\nconst reducer = (state = defaultState, action) => {\r\n    if (action.type === \"NUM-CHANGE\") {\r\n        let newgrid = Object.assign([...state.grid], {\r\n            [action.y]: Object.assign([...state.grid[action.y]], {\r\n              [action.x]: action.value\r\n            })\r\n          })\r\n        return {\r\n            grid: newgrid\r\n        };\r\n    } else if (action.type === 'SET-BOARD'){\r\n        return{\r\n            grid: action.grid\r\n        };\r\n    } else {\r\n        return state;\r\n    }\r\n};\r\n\r\nconst store = createStore(reducer);\r\n\r\nconst setBoardAction = (board) => {\r\n    return {\r\n        type: 'SET-BOARD',\r\n        grid: board\r\n    }\r\n};\r\n\r\nconst numChangeAction = (psx,psy,val) => {\r\n    return {\r\n      type: 'NUM-CHANGE',\r\n      x: psx,\r\n      y: psy,\r\n      value: val,\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { grid: state.grid };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        numChange: (x,y,val) => dispatch(\r\n            numChangeAction(x,y,val)\r\n        )\r\n    }\r\n}\r\n\r\n//React Code\r\nclass Cell extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            x: this.props.posx,\r\n            y: this.props.posy,\r\n            isGiven: this.props.isGiven,\r\n        };\r\n        this.clicked = this.clicked.bind(this);\r\n    }\r\n\r\n    clicked() {\r\n        var val = this.props.grid[this.state.y][this.state.x]\r\n        if (val < 9 & val !== '') {\r\n            this.props.numChange(\r\n                this.state.x,\r\n                this.state.y,\r\n                val + 1,\r\n            )\r\n        } else if (val === 9) {\r\n            this.props.numChange(\r\n                this.state.x,\r\n                this.state.y,\r\n                '',\r\n            )\r\n        } else if (val === '') {\r\n            this.props.numChange(\r\n                this.state.x,\r\n                this.state.y,\r\n                1,\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isGiven) {\r\n            return (\r\n                <td className=\"isGiven\">\r\n                    {this.props.grid[this.state.y][this.state.x]}\r\n                </td>\r\n            );\r\n        } else {\r\n            return (\r\n                <td>\r\n                    <button className='cell-button' onClick={this.clicked}>\r\n                        {this.props.grid[this.state.y][this.state.x]}\r\n                    </button>\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nconst Celll = connect(mapStateToProps, mapDispatchToProps)(Cell);\r\n\r\nclass Grid extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        var grid = store.getState().grid\r\n        grid = grid.map(\r\n            (row, y) => {\r\n                return row.map(\r\n                    (item, x) => {\r\n                        if(item === '') {\r\n                            //store.dispatch(numChangeAction(x,y,''))\r\n                            return <Celll posx={x} posy={y} isGiven={false}/>\r\n                        } else {\r\n                            return <Celll posx={x} posy={y} isGiven={true}/>\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        )\r\n\r\n        return (\r\n\t    <div>\r\n\t    <table className='inline' >\r\n        <colgroup><col/><col/><col/></colgroup>\r\n        <colgroup><col/><col/><col/></colgroup>\r\n        <colgroup><col/><col/><col/></colgroup>\r\n        <tbody>\r\n            <tr>{grid[0]}</tr>\r\n            <tr>{grid[1]}</tr>\r\n            <tr>{grid[2]}</tr>        \r\n        </tbody>\r\n        <tbody>\r\n            <tr>{grid[3]}</tr>\r\n            <tr>{grid[4]}</tr>\r\n            <tr>{grid[5]}</tr>        \r\n        </tbody>\r\n        <tbody>\r\n            <tr>{grid[6]}</tr>\r\n            <tr>{grid[7]}</tr>\r\n            <tr>{grid[8]}</tr>        \r\n        </tbody>\r\n        </table>\r\n\t    </div>\r\n\t    );\r\n    }\r\n}\r\n\r\nclass Sudoku extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.fetchSudoku = this.fetchSudoku.bind(this);\r\n    }\r\n\r\n    fetchSudoku() {\r\n        var puzzle = [\r\n            ['', 6,'', 3,'','', 8,'', 4],\r\n            [5 , 3, 7,'', 9,'','','',''],\r\n            ['',4,'','','',6,3,'',7],\r\n            ['',9,'','',5,1,2,3,8],\r\n            ['','','','','','','','',''],\r\n            [7,1,3,6,2,'','',4,''],\r\n            [3,'',6,4,'','','',1,''],\r\n            ['','','','',6,'',5,2,3],\r\n            [1,'',2,'','',9,'',8,'']];\r\n\r\n        store.dispatch(setBoardAction(puzzle))\r\n    }\r\n    \r\n    // returns true if arraySolution is valid, false otherwise\r\n    checkSolution() {\r\n        const valid = isValidSudoku(store.grid)\r\n        console.log(valid)\r\n    }\r\n\r\n    render() {\r\n        this.fetchSudoku()\r\n        return ( \r\n            <div >\r\n                <h1>React/Redux Sudoku</h1>\r\n                <Grid />\r\n                <div className='inline'>\r\n                    <button onClick={this.fetchSudoku} className='bottomButtons'>New Sudoku</button>\r\n                    <button className='bottomButtons'>Check Solution</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Sudoku />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);","export const isValidSudoku = (arraySolution) => {\r\n    for (var y = 0; y < 9; ++y) {\r\n        for (var x = 0; x < 9; ++x) {\r\n            var value = arraySolution[y][x];\r\n            if (value) {\r\n                if(value === ''){\r\n                    return false;\r\n                }\r\n                // Check the line\r\n                for (var x2 = 0; x2 < 9; ++x2) {\r\n                    if (x2 != x && arraySolution[y][x2] == value) {\r\n                        return false;\r\n                    } \r\n                }\r\n                // Check the column\r\n                for (var y2 = 0; y2 < 9; ++y2) {\r\n                    if (y2 != y && arraySolution[y2][x] == value) {\r\n                        return false;\r\n                    } \r\n                }\r\n                // Check the square\r\n                var startY = Math.floor(y/3)*3;\r\n                for (var y2 = startY; y2 < startY + 3; ++y2) {\r\n                    var startX = Math.floor(x/3)*3;\r\n                    for (x2 = startX; x2 < startX + 3; ++x2) {\r\n                        if ((x2 != x || y2 != y) && arraySolution[y2][x2] == value) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const newRandomSudoku = () => {\r\n    return [[]];\r\n}"],"sourceRoot":""}